#Link pentru laborator: https://docs.google.com/document/d/1SwCmGlHJVJSRsm3SgpxEQht2g5JhNQDXoEeR-F-6gpU/edit?usp=sharing


#problema 1

# prop=input("propozitia este: ")
# list=[word for word in prop.split(" ") if word[0] in "aeiouAEIOU"]
# print(list)

#problema 2
# a)	criptare
# s=input("s=")
# k=int(input("k="))
# lung=ord('z')-ord('a')+1
# L=[(chr(ord(c)-ord('a')+k)%lung +ord('a') if c.isalpha() else c) for c in s ]
# prop=''.join(L)
# print(prop)

# b)	decriptare
# 	prop = "ana are multe mere, dar nu are 7 banane!".lower()
# 	k=int(input("k= "))
# 	lung = ord("z") - ord("a") + 1
# 	l_cesar = [(chr((ord(x) - 97-k) % lung + 97) if x.isalpha() else x) for x in prop]
# 	prop2="".join(l_cesar)
# 	print(prop2)


#problema 3
# prop = "ana are multe mere, dar nu are 7 banane!".lower()
# l_pasareasca = [(c+"p"+c if c in "aeiou" else c) for c in prop]
# prop2="".join(l_pasareasca)
# print(prop2)


#problema 4

# list_lowercase=[chr(i) for i in range(97,123)]
# print(list_lowercase)

#problema 5
# n=int(input("n="))
# list=[i if i%2!=0 else -i for i in range(1,n+1)]
# print(list)

#problema 6
# l_num=[1,4,3,7,19,21,34,57,22,23,107]
# l_num_imp=[i for i in l_num if i%2==1 ]
# print(l_num_imp)

#problema 7
# l_num=[1,2,3,8,34,67,22,17,107,6,29,57,30]
# n=len(l_num)
# l_poz_imp=[l_num[poz] for poz in range(n) if poz%2==1]
# print(l_poz_imp)

#problema 8

# l_num=[1,2,3,8,34,67,22,17,107,6,29,57,30]
# n=len(l_num)
# l_poz_num=[l_num[poz] for poz in range (n) if l_num[poz]%2==poz%2] 

# print(l_poz_num)

#problema 9
# L=[1,2,3,4,5,6]
# L2=[(L[i],L[i+1]) for i in range(len(L)-1)]
# print(L2)

#Problema 10

# sir=input("sir: ")
# n=len(sir)
# list=[sir[i:]+sir[:i] for i in range(n)]
# print(list)

#Problema 11

# L1=list(range(11))
# L2=list(range(10,21))
# L1[::2]=L2[::2]         #seleceteaza fiecare element din 2 in 2

# print(L1)
# print(L2)

#Problema 12

#a) prima varianta folosind slice
# L=list(range(15))
# k=int(input("k="))
# L[:k]=[]
# print(L)

#b) a doua varianta folosind pop

# L=list(range(15))
# k=int(input("k="))
# for i in range(k-1,-1,-1):
#     L.pop(i)
# print(L)

#c) a treia varianta folosind pop

# L=list(range(15))
# print(L)
# k=int(input("k="))
# for i in range (k):
#     L.pop(0)
# print(L)

#problema 13

# l=[12, 3, 5, 23, 0, 45,6, 7 ,12, 0, 3, 100, 4, 5,]
# if l.count(0)>=2:
#     poz1=l.index(0)
#     poz2=l.index(0,poz1+1)
#     l[poz1:poz2+1]=[]

# print(l)

#problema 14

# l=[0,3,4,2,0,6,18,0,9,2,3,0,23,87,0,4,0,0,2,3,1,4,89]
# for i in range (l.count(0)):
#     l.remove(0)
# print(l)

#problema 15
# list=[5,1,3,2,8,6,4]
# k=int(input("k="))
# n=len(list)

# sum_minim=2000000000000
# poz_minim=-1

# for i in range(n-k+1):
#     suma_curenta=sum(list[i:i+k])
#     print(suma_curenta)
#     if suma_curenta<sum_minim:
#         poz_minim=i
#         sum_minim=suma_curenta
# del list[poz_minim:poz_minim+k]

# print(list)

#problema 16
# list=[1,4,2,3,6,7,19,0,-1,3,4,2,1,1,1,1]
# unique_list=[]
# for i in list:
#     if i  not in unique_list:
#         unique_list.append(i)


# print(unique_list)

#problema 17

# lista = [int(i) for i in input('Listă: ').split()]

# lista[:] = sum([[i, 0] if i < 0 else [i] for i in lista], [])

# print('Rezultat: ', lista)

 # lista[:] codul modifica lista in poz curenta
 #[i, 0] if i < 0 else [i] for i in lista] adauga i si 0 daca i<0 , altfel adauga dor 0
 #sum([...], []): The sum function is used to flatten the list of lists generated by the list comprehension.
 #sum() normally adds elements in a list, but when you pass an empty list ([]) as the second argument, it concatenates the lists inside the main list instead of adding them. This flattens the list structure into one list.


#problema 18

# def isprime(n):
#     ok=True
#     for i in range(2,n//2+1):
#         if n%i==0:
#             ok=False
#     return ok

# n=int(input("n=  "))
# list_prime=[numar for numar in range(2, n+1) if isprime(numar)]
# print(list_prime)

#problema 19
# list=[int(i) for i in input('Listă: ').split()]
# pairs=0
# freq={}
# unique_list=[]
# for i in list:
#     if i in freq:
#         freq[i]+=1
#     else:
#         freq[i]=1
# for i in list:
#     if freq[i] not in unique_list:
#         unique_list.append(freq[i])
# for i in unique_list:
#     pairs+=i//2

# print(pairs)

#problema 20

# list1=[int(i) for i in input("list1: ").split()]
# list2=[int(i) for i in input("list2: ").split()]
# intersection1=[]
# reunion1=[]
# intersection=[]
# reunion=[]
# for i in list1:
#     for j in list2:
#         if j in list1:
#             intersection1.append(j)
#         else:
#             reunion1.append(i)
#             reunion1.append(j)

# for i in intersection1:
#     if i not in intersection:
#         intersection.append(i)

# for j in reunion1:
#     if j not in reunion:
#         reunion.append(j)

# print(f"The reunion is {sorted(reunion)}")
# print(f"The intersection is {sorted(intersection)}")

#problema 21
# def generate_pascals_triangle(n):
#     triangle = []

#     for i in range(n):
#         row = [1] * (i + 1)
#         for j in range(1, i):
#             row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]
#         triangle.append(row)

#     return triangle

# n = int(input("n= "))
# pascals_triangle = generate_pascals_triangle(n)
# for row in pascals_triangle:
#     for elem in row:
#         print(elem, end=" ")
#     print()

#problema 22

# list=[int(i) for i in input("list: ").split()]
# minim=min(list)
# maxim=max(list)

# dif=maxim-minim

# print(list.count(dif))

#problema 23

# list=[int(i) for i in input("list:").split()]
# n=len(list)
# op=0
# for i in range(n//2+1):
#     if list[i]!=list[n-i-1]:
#         op+=1
# print(op)

#problema 25

# list=[int(i) for i in input("list:").split()]
# maxim=0
# length=1
# n=len(list)
# for i in range(n-1):
#     if list[i]<list[i+1]:
#         length+=1
#         if length>maxim:
#             maxim=length
#     else:
#         length=1
# print(maxim)   

#problema 26/24